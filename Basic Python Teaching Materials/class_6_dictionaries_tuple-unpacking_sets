{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"d3vnaYs4_mss"},"source":["### Tuple unpacking\n","\n","So-called because it's commonly used for tuples, but can be used for any iterable.<br>\n","If we carry out an assignment with an iterable on the right, and a number of variable names on the left equal to the length of the iterable, then Python will assign, in order, each of the items from the iterable, to each of the variable names on the left:"]},{"cell_type":"code","metadata":{"id":"0xFcuvUkACi2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639390726284,"user_tz":-60,"elapsed":608,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"de29149a-a783-4e3b-de84-c53aadea5d15"},"source":["first, last = \"Andrew\", \"Want\"\n","print(first)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Andrew\n"]}]},{"cell_type":"markdown","metadata":{"id":"3LcjHhmQAYdS"},"source":["This can also be used to swap variable values, which is actually more common than you might think. Again, we will highlight a specific use-case later on, when we talk about dictionaries and loops."]},{"cell_type":"code","metadata":{"id":"W8hvU1ueAsjY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639390769501,"user_tz":-60,"elapsed":588,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"6f5aed89-cdf3-4f39-fbba-eaacc55e8b34"},"source":["a = 1\n","b = 10\n","a, b = b, a\n","print(\"value for a is: {}\".format(a))\n","print(\"value for b is: {}\".format(b))\n","# this is a commnent\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["value for a is: 10\n","value for b is: 1\n"]}]},{"cell_type":"code","source":["d, e = (1, 2, 3)"],"metadata":{"id":"ZKQQ0SYVPFLI","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"error","timestamp":1639390800777,"user_tz":-60,"elapsed":557,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"f9775500-f06f-4e41-ea05-7814ccbbcd9a"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-0f713c26d11a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 2)"]}]},{"cell_type":"markdown","metadata":{"id":"6fn-zCSZA7EH"},"source":["Again, as long as the number of variables is the same on both sides, Python will do this. Try it again with different numbers of variables on each side, and see what happens. Can you understand what the error is telling you?"]},{"cell_type":"markdown","source":["Let's imagine we have a supermarket and we want to keep track of the items and prices. That's why we created a list that keeping items and prices as tuples."],"metadata":{"id":"YuwNIZIcq8SH"}},{"cell_type":"code","source":["item_price_list = [(\"apple\", 1.99), (\"banana\", 3.99), (\"milk\", 2.99), (\"bread\", 4.00), (\"egg\", 9.49)]\n","\n","for elements in item_price_list:\n","  print(elements)"],"metadata":{"id":"fKZ5jCvfpv5z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639390903393,"user_tz":-60,"elapsed":372,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"e4880ee4-b253-4a55-cb99-e4fdeacce85b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('apple', 1.99)\n","('banana', 3.99)\n","('milk', 2.99)\n","('bread', 4.0)\n","('egg', 9.49)\n"]}]},{"cell_type":"markdown","source":["With for loop we can get each tuple from the list. Furthermore, we can pick items and manipulate them inside of the tuples."],"metadata":{"id":"laAc45vwraeg"}},{"cell_type":"code","source":["for item, price in item_price_list:\n","  print(item)"],"metadata":{"id":"fTMDP9Y7snJ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639390946332,"user_tz":-60,"elapsed":370,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"1aa3a7a8-b1ef-4070-e798-6e7809bd72cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["apple\n","banana\n","milk\n","bread\n","egg\n"]}]},{"cell_type":"markdown","source":["Let's say we want to make a discount on our items. You can use tuple unpacking to unpack elements in the tuple and them modify them."],"metadata":{"id":"4Yl-IWiJt9dd"}},{"cell_type":"code","source":["for item, price in item_price_list:\n","  price = price - (0.15* price)\n","  print('Now the price of {} is {}'.format(item, price))"],"metadata":{"id":"GMc39Z44tVEt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639390975252,"user_tz":-60,"elapsed":377,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"dbf034b0-9224-4f11-e8e1-6c5cde21c2ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Now the price of apple is 1.6915\n","Now the price of banana is 3.3915\n","Now the price of milk is 2.5415\n","Now the price of bread is 3.4\n","Now the price of egg is 8.0665\n"]}]},{"cell_type":"markdown","metadata":{"id":"NXew1mbwBjyO"},"source":["## Dictionaries\n","\n","Now this brings us to dictionaries. Dictionary actually the most efficient way to do what we did above.\n","\n","Python dictionaries are **everywhere**, and the reason is that they're incredibly useful and versatile containers for information. They're also very efficient, and can be faster than lists to access information. \n","\n","They're **mutable**, so we can add, remove and modify contents whenever we need. But they don't allow duplicates!\n","\n","*However* they are not indexed in the same way as lists and tuples, instead, they are made of key:value pairs, similar to a phone book. One of the limitations is that the key **must be immutable** and it has to be a string.\n","\n","### How do we create a dictionary?\n","\n","Well, there's a function: `dict` which will create a dictionary of whatever you feed in, however, the contents have to be fed in in a specific way which we will explore soon. For now, we can use curly braces `{}`"]},{"cell_type":"markdown","source":["To create a dictionary we are using `{\"key1\": \"value1\", 'key2': 'value2', etc.}`\n","As you can see you can use either double quote or single quote. But be consistent within a dictionary. Don't be like me :(\n","\n","\n","As mentioned earlier `key` has to be **immutable!** (often strings or integers)\n","\n","`value` can be any data structure (string, integer or float) or data container (lists, dictionaries, tuples, arrays) or functions."],"metadata":{"id":"-rvXAGdnvvxN"}},{"cell_type":"code","metadata":{"id":"MwIwRGmIDJu6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639391464308,"user_tz":-60,"elapsed":429,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"b99a4c9b-eeec-4194-9d25-0a04b863d557"},"source":["my_first_dict = {\"Andrew\": 48123456789,\n","                 \"Ilke\": 48234567890,\n","                 \"Mateusz\": 48345678901,\n","                 \"Andrew J\": 45633256663}\n","# and we can access elements using the same square bracket syntax, but using the key (the string on the left)\n","print(\"Andrew's phone number is: +{}\".format(my_first_dict[\"Andrew\"]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Andrew's phone number is: +48123456789\n"]}]},{"cell_type":"markdown","metadata":{"id":"AZRj8cVfEJLK"},"source":["Can anyone spot the other important limitation of dictionaries?\n","\n","If you have multiple pieces of information to include, then you can use a list as the value in your dictionary: "]},{"cell_type":"code","metadata":{"id":"JAYCoHyVItrT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639391587318,"user_tz":-60,"elapsed":406,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"1f3b2390-2104-49b1-c3f3-01a1097507ca"},"source":["personal_information = {\"Andrew\": [48123456789, \"Warszawa\"],\n","                        \"Ilke\": [48234567890, \"Warszawa\"],\n","                        \"Mateusz\": [48345678901, \"Warszawa\"]}\n","\n","# or, a dictionary might be even easier to understand:\n","\n","personal_information_improved = {\"Andrew\": {\"phone\": 48123456789, \"city\": \"Warszawa\"},\n","                                 \"Ilke\": {\"phone\": 48234567890, \"city\": \"Warszawa\"},\n","                                 \"Mateusz\": {\"phone\": 48345678901, \"city\": \"Warszawa\"}}\n","print(personal_information_improved[\"Ilke\"][\"phone\"])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["48234567890\n"]}]},{"cell_type":"markdown","metadata":{"id":"KTXP87UBKeZD"},"source":["As of Python 3.5, dictionaries are now ordered in Python; if you want to access elements of your dictionary, they will be returned in the order they were inserted. However, this behaviour can be inconsistent, so *always best to assume that your dictionary is unordered!*\n","\n","We can also overwrite the dictionary in more straightforward fashion (like we were doing it with list items):"]},{"cell_type":"code","metadata":{"id":"HkCSf3NULfjb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639391735120,"user_tz":-60,"elapsed":401,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"d6da5567-299f-4730-bf53-eb15749938f9"},"source":["my_first_dict[\"Andrew\"] = \"\"\n","print(my_first_dict)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Andrew': '', 'Ilke': 48234567890, 'Mateusz': 48345678901, 'Andrew J': 45633256663}\n"]}]},{"cell_type":"markdown","metadata":{"id":"HJuyREf7FarS"},"source":["Let's go back to our supermarket example! How would you write it as dictionary?"]},{"cell_type":"code","source":["item_price_list = [(\"apple\", 1.99), (\"banana\", 3.99), (\"milk\", 2.99), (\"bread\", 4.00), (\"egg\", 9.49)]\n","item_price_dict = {\"apple\": 1.99, \"banana\": 3.99, \"milk\": 2.99, \"bread\": 4.00}\n","\n","item_price_dict.items()\n","item_price_dict.keys()\n","item_price_dict.values()"],"metadata":{"id":"TR3AsnXX5B-T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639392153885,"user_tz":-60,"elapsed":378,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"60d894b0-a1a0-493b-ebf5-14fffaee539b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_values([1.99, 3.99, 2.99, 4.0])"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["Four commonly used dictionary methods are: <br>\n","`items`: returns an iterable of the key, value pairs as a sequence of tuples<br>\n","`keys`: returns an iterable of keys<br>\n","`values`: returns an iterable of values<br>\n","`update`: allows addition/modification of the dictionary, based on another dictionary<br>\n","\n","Let's find what first three methods are doing with the help of Google. And use them with our example."],"metadata":{"id":"IsqllbYx6P7Y"}},{"cell_type":"code","source":["# please use the below dictionaries for the update method.\n","\n","fruits = {\"apple\": 1.99, \"banana\": 3.99, \"strawberry\": 12.99, \"mango\": 8.99}\n","fruits2 = {\"tomato\": 1.99, \"pear\": 2.99, \"mandarin\": 3.20}\n","\n","fruits.update(fruits2)\n","print(fruits)"],"metadata":{"id":"LYVgEEPj9Smk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639392298916,"user_tz":-60,"elapsed":494,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"119a6e3f-293f-4673-fa6b-da2cba5b313f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple': 1.99, 'banana': 3.99, 'strawberry': 12.99, 'mango': 8.99, 'tomato': 1.99, 'pear': 2.99, 'mandarin': 3.2}\n"]}]},{"cell_type":"markdown","source":["We can loop through dictionaries too."],"metadata":{"id":"SCg2h1Ls_hZA"}},{"cell_type":"code","metadata":{"id":"9rUn26Pt2Cnl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639392402854,"user_tz":-60,"elapsed":371,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"cd7efe80-74bc-4ea5-ecdb-dbda2ba7b8b3"},"source":["my_new_dict = {\"Poland\": \"Warsaw\",\n","               \"France\": \"Paris\",\n","               \"United Kingdom\": \"London\",\n","               \"Sweden\": \"Stockholm\"}\n","               \n","# Let's say we want to get the contents of the dictionary and print each country:\n","\n","for country in my_new_dict.keys():\n","  print(country)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Poland\n","France\n","United Kingdom\n","Sweden\n"]}]},{"cell_type":"code","metadata":{"id":"6YysQuvJJ-bQ"},"source":["# Now, what if we just want those capital cities?\n","for capital in my_new_dict.values():\n","  print(capital)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0ojrwRC7KCTT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639392681349,"user_tz":-60,"elapsed":394,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"2b009428-231e-4e59-b7d4-821dea22d0ac"},"source":["# And what if we want both?\n","for capital, country in my_new_dict.items():\n","  print(country)\n","  print(capital)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Warsaw\n","Poland\n","Paris\n","France\n","London\n","United Kingdom\n","Stockholm\n","Sweden\n"]}]},{"cell_type":"code","metadata":{"id":"-CRT2H3xKGss","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639392920674,"user_tz":-60,"elapsed":445,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"5f396ba7-3f61-4280-dc3b-ab7abe7e4228"},"source":["# And, what if we want to keep track of how many entries in the dictionary we've processed,\n","# we can use a new function: enumerate\n","\n","for index, country in enumerate(my_new_dict.keys()):\n","  print(\"Element: {} is country {}\".format(index, country))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Element: 0 is country Poland\n","Element: 1 is country France\n","Element: 2 is country United Kingdom\n","Element: 3 is country Sweden\n"]}]},{"cell_type":"code","metadata":{"id":"M-24u9HuKKFw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639393037411,"user_tz":-60,"elapsed":393,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"be6a4fe1-3f8b-456d-b1d8-11eee7dd3a9d"},"source":["# If we want to do this with items, we need to package things up a little so that Python knows what to do\n","for index, (country, capital) in enumerate(my_new_dict.items()):\n","  print(f\"Element {index} is {capital}, the capital of {country}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Element 0 is Warsaw, the capital of Poland\n","Element 1 is Paris, the capital of France\n","Element 2 is London, the capital of United Kingdom\n","Element 3 is Stockholm, the capital of Sweden\n"]}]},{"cell_type":"code","metadata":{"id":"1xpNLj-0KMU1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639393081396,"user_tz":-60,"elapsed":447,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"eb4137f4-9d43-4b1a-a092-84647065b745"},"source":["# If you're doing this and aiming to label something for non-programmers, you can supply an additional argument to enumerate to specify the start location, e.g. 1\n","for index, capital in enumerate(my_new_dict.values(), 1):\n","  print(\"Element: {} is capital {}\".format(index, capital))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Element: 1 is capital Warsaw\n","Element: 2 is capital Paris\n","Element: 3 is capital London\n","Element: 4 is capital Stockholm\n"]}]},{"cell_type":"markdown","metadata":{"id":"HQLk9n40HiZ2"},"source":["You might occasionally see people doing something like this:\n","\n","```\n","count = 0\n","for country in my_new_dict.values():\n","    print(country, count)\n","    count += 1  # This is a shorthand which means count = count + 1\n","```\n","It's fine, but usually using enumerate is better (faster, and you don't have to keep track of that other variable...)\n","\n"]},{"cell_type":"code","source":["# Write a function that will take input string representing genetic sequence and\n","# will give a complementary string as an output\n","\n","dna_sequence = \"ATGCTATGCGCGCGTAGCGTG\"\n","\n","# We did this exercise before, but let's try to solve the same thing using dictionaries this time!"],"metadata":{"id":"dPuzFz4HM4vM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XQYFTbTRMLTz"},"source":["Another type of container you might see is the `set`. This is, like a dictionary without key:pairing, unordered, and each element is unique. We can create one using the `set` function, or by using curly braces (like dictionary):"]},{"cell_type":"code","metadata":{"id":"1zVP8YnQMlG8"},"source":["my_first_set = {1, 2, 3, 4, 5, 5, 5, 5}\n","# or an iterable:\n","my_next_set = set([1, 2, 3, 4, 5, 5, 5, 5])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zM3qHdi-M2kZ"},"source":["The most common uses of this are:\n","\n","1.   Quickly checking whether all elements in a list are unique\n","2.   Finding the unique entries in the list\n","3.   Finding the overlap between two lists\n","\n","There are better ways of doing 2. however because often the sequence of elements is quite important, or the location of those elements. It's rare that you only want to find the unique entries, you almost always want to do something with them once you have them."]},{"cell_type":"code","source":["text = '''But soft what light through yonder window breaks \\n\n","It is the east and Juliet is the sun \\n\n","Arise fair sun and kill the envious moon \\n\n","Who is already sick and pale with grief'''\n","\n","# Do you remember this string? Let's use set, and find and print each unique letter in the text!"],"metadata":{"id":"UUqrnkAkLdqN"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2jnTSepGNqmM"},"source":["list1 = [1, 2, 3, 4, 5]\n","list2 = [4, 5, 6, 7, 8]\n","set1 = set(list1)\n","set2 = set(list2)\n","overlap = set1.intersection(list2)\n","print(overlap)"],"execution_count":null,"outputs":[]}]}