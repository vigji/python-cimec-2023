{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"class_6_answers_to_exercises","provenance":[],"authorship_tag":"ABX9TyNLqVln27hgzmxeaM1XZzPR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["item_price_list = [(\"apple\", 1.99), (\"banana\", 3.99), (\"milk\", 2.99), (\"bread\", 4.00), (\"egg\", 9.49)]\n","\n","item_price_dict = {\"apple\": 1.99, \"banana\": 3.99, \"milk\": 2.99, \"bread\": 4.00, \"egg\": 9.49}"],"metadata":{"id":"ueWUjNA-5aon","executionInfo":{"status":"ok","timestamp":1639149593370,"user_tz":-60,"elapsed":626,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["item_price_dict.items() # it returns it as a list of tuples!"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z1T4b1O57wcv","executionInfo":{"status":"ok","timestamp":1639150043519,"user_tz":-60,"elapsed":266,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"febb1c94-a3fa-4948-ac4d-6df6e017a7f6"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_items([('apple', 1.99), ('banana', 3.99), ('milk', 2.99), ('bread', 4.0), ('egg', 9.49)])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["item_price_dict.keys() # it returns it a list!"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoE1GgmH9Umi","executionInfo":{"status":"ok","timestamp":1639150087809,"user_tz":-60,"elapsed":281,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"7b6c994c-03e8-4904-d69b-733e3d19497f"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['apple', 'banana', 'milk', 'bread', 'egg'])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["item_price_dict.values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2HobN1OS9phg","executionInfo":{"status":"ok","timestamp":1639150177920,"user_tz":-60,"elapsed":231,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"dd052e69-5da7-4fff-dd40-76a57de9c17d"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_values([1.99, 3.99, 2.99, 4.0, 9.49])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# please use the below dictionaries for the update method.\n","\n","fruits = {\"apple\": 1.99, \"banana\": 3.99, \"strawberry\": 12.99, \"mango\": 8.99}\n","fruits2 = {\"tomato\": 1.99, \"pear\": 2.99, \"mandarin\": 3.20}\n","\n","fruits.update(fruits2)\n","print(fruits)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cON7i_1a-3Wq","executionInfo":{"status":"ok","timestamp":1639150616932,"user_tz":-60,"elapsed":243,"user":{"displayName":"Ilke Guntan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01988841015738453584"}},"outputId":"38d60107-fc90-4359-b482-71c68213d6e3"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["{'apple': 1.99, 'banana': 3.99, 'strawberry': 12.99, 'mango': 8.99, 'tomato': 1.99, 'pear': 2.99, 'mandarin': 3.2}\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VywPSzPW3stO"},"outputs":[],"source":["# Now, what if we just want those capital cities?\n","for capital in my_new_dict.values():\n","  print(capital)"]},{"cell_type":"code","source":["# And what if we want both?\n","for country, capital in my_new_dict.items():  # the items function returns the key and value of the dictionary as a tuple\n","# Be careful of in which order you put the tuple names. First is the key and second is the value attached to it.\n","  print(\"{} is the capital of {}\".format(capital, country))"],"metadata":{"id":"h7-bzr0k4d4s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a function that will take input string representing genetic sequence and\n","# will give a complementary string as an output\n","\n","dna_sequence = \"ATGCTATGCGCGCGTAGCGTG\"\n","\n","# We did this exercise before, but let's try to solve the same thing using dictionaries this time!\n","\n","def complementary_seq(sequence):\n","  conversion_dict = {\"A\": \"T\", \"G\": \"C\", \"T\": \"A\", \"C\": \"G\"}\n","  other_strand = \"\"\n","  for base in sequence:\n","    other_strand += conversion_dict[base]\n","  return other_strand\n","\n","print(complementary_seq(dna_sequence))"],"metadata":{"id":"vSgSIat_NI--"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["text = '''But soft what light through yonder window breaks \\n\n","It is the east and Juliet is the sun \\n\n","Arise fair sun and kill the envious moon \\n\n","Who is already sick and pale with grief'''\n","\n","# Do you remember this string? Let's use set, and find and print each unique word in the text!\n","\n","lst = text.split()\n","\n","print(set(lst))"],"metadata":{"id":"bfFeqqvILs37"},"execution_count":null,"outputs":[]}]}